variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
test
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
print(test)
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
print(test)
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
env_lookup_functions
is.list(env_lookup_functions)
is.list(env_lookup_functions$FSRegionDistrict)
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, plot_data[[variable_name]]))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, list(plot_data[[variable_name]])))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
print(test)
test
test$FSRegionDistrict
View(a)
View(test)
test$FSRegionDistrict
test$FSRegionDistrict[[1]]
test$FSRegionDistrict$table
print(ENV_Plot_data_for_level)
ENV_Plot_data_for_level
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))
# Get relevant plot data rows from each Plot data file
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
# Write relevant plot data rows from each Plot
ENV_Plot_data_for_level
ENV_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_ENV.csv")
Humus_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Humus.csv")
Mineral_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Mineral.csv")
Climate_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster_Plot_Climatedata.csv")
Admin_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Admin.csv")
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))
# Get relevant plot data rows from each Plot data file
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
# Write relevant plot data rows from each Plot
ENV_Plot_data_for_level
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(tidymodels)
require(data.table)
require(data.tree)
require(DataExplorer)
require(C50)
require(indicspecies)
require(doParallel)
require(philentropy)
require(dplyr)
source("CodeUsingTreeFunctions.R")
source("./_functions/_TabletoTree.R")
source("./_functions/_TreetoTable.R")
source("./_functions/_VegdatSUsummary.R")
source("./_functions/_spp_importance.R")
source("./_functions/_CreateHierReportData.R")
# Need to do for each level for each level_value in level
level_name <- "Order"
level_value <- "ORDER Poputre"
unique_classes <- unique(Hier.data[["Class"]])
unique_orders <- unique(Hier.data[["Order"]])
unique_suborder <- unique(Hier.data[["Suborder"]])
unique_alliance <- unique(Hier.data[["Alliance"]])
unique_assoc <- unique(Hier.data[["Assoc"]])
createHierReportData(level_name, level_value, SUTab)
#lapply(uniqueClasses, createReportData(levelName))
ENV_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_ENV.csv")
Humus_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Humus.csv")
Mineral_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Mineral.csv")
Climate_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster_Plot_Climatedata.csv")
Admin_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Admin.csv")
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))
# Get relevant plot data rows from each Plot data file
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
# Write relevant plot data rows from each Plot
# This prints env variable names to a list. A JASON doc is then created manually
#reports_dir <- file.path("reports", level_name)
#if (!dir.exists(reports_dir)) dir.create(reports_dir, recursive = TRUE)
library(rjson)
create_json_template <- function(plot_data_names, file_name) {
if (!dir.exists("lookup_functions")) {
dir.create("lookup_functions")
}
if(file.exists(file.path("lookup_functions", file_name))) return()
names_list <- list()
for (name in plot_data_names) {
names_list[[ name ]] <- list()
}
write(toJSON(names_list), file.path("lookup_functions", file_name))
}
create_json_template(names(ENV_Plot_data), "env_lookup_functions.json")
create_json_template(names(Humus_Plot_data), "humus_lookup_functions.json")
create_json_template(names(Mineral_Plot_data), "mineral_lookup_functions.json")
create_json_template(names(Climate_Plot_data), "climate_lookup_functions.json")
create_json_template(names(Admin_Plot_data), "admin_lookup_functions.json")
# Note: The functions need to be manually filled out in the json file
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, list(plot_data[[variable_name]])))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
print(ENV_Plot_data_for_level)
ENV_Plot_data
knitr::opts_chunk$set(echo = FALSE)
require(tidyverse)
require(tidymodels)
require(data.table)
require(data.tree)
require(DataExplorer)
require(C50)
require(indicspecies)
require(doParallel)
require(philentropy)
require(dplyr)
source("CodeUsingTreeFunctions.R")
source("./_functions/_TabletoTree.R")
source("./_functions/_TreetoTable.R")
source("./_functions/_VegdatSUsummary.R")
source("./_functions/_spp_importance.R")
source("./_functions/_CreateHierReportData.R")
# Need to do for each level for each level_value in level
level_name <- "Order"
level_value <- "ORDER Poputre"
unique_classes <- unique(Hier.data[["Class"]])
unique_orders <- unique(Hier.data[["Order"]])
unique_suborder <- unique(Hier.data[["Suborder"]])
unique_alliance <- unique(Hier.data[["Alliance"]])
unique_assoc <- unique(Hier.data[["Assoc"]])
createHierReportData(level_name, level_value, SUTab)
#lapply(uniqueClasses, createReportData(levelName))
ENV_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_ENV.csv")
Humus_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Humus.csv")
Mineral_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Mineral.csv")
Climate_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster_Plot_Climatedata.csv")
Admin_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Admin.csv")
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))
# Get relevant plot data rows from each Plot data file
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
# Write relevant plot data rows from each Plot
# This prints env variable names to a list. A JASON doc is then created manually
#reports_dir <- file.path("reports", level_name)
#if (!dir.exists(reports_dir)) dir.create(reports_dir, recursive = TRUE)
library(rjson)
create_json_template <- function(plot_data_names, file_name) {
if (!dir.exists("lookup_functions")) {
dir.create("lookup_functions")
}
if(file.exists(file.path("lookup_functions", file_name))) return()
names_list <- list()
for (name in plot_data_names) {
names_list[[ name ]] <- list()
}
write(toJSON(names_list), file.path("lookup_functions", file_name))
}
create_json_template(names(ENV_Plot_data), "env_lookup_functions.json")
create_json_template(names(Humus_Plot_data), "humus_lookup_functions.json")
create_json_template(names(Mineral_Plot_data), "mineral_lookup_functions.json")
create_json_template(names(Climate_Plot_data), "climate_lookup_functions.json")
create_json_template(names(Admin_Plot_data), "admin_lookup_functions.json")
# Note: The functions need to be manually filled out in the json file
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, list(plot_data[[variable_name]])))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
print(ENV_Plot_data_for_level)
ENV_Plot_data_for_level
plot_numbers_in_level
ENV_Plot_data_for_level
ENV_Plot_data
View(ENV_Plot_data)
plot_numbers_in_level
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))
# Get relevant plot data rows from each Plot data file
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
# Write relevant plot data rows from each Plot
ENV_Plot_data_for_level
plot_numbers_in_level
ENV_Plot_data$PlotNumber
ENV_Plot_data$PlotNumber %in% plot_numbers_in_level
table(ENV_Plot_data$PlotNumber %in% plot_numbers_in_level)
plot_numbers_in_level
ENV_Plot_data$PlotNumber
ENV_Plot_data$PlotNumber[["964159"]]
ENV_Plot_data$PlotNumber["964159"]
ENV_Plot_data$PlotNumber %in% "964159"
# Get relevant plot data rows from each Plot data file
ENV_Plot_data_for_level <- ENV_Plot_data[[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]]
x <- c(1,2,3,4,5)
c(3,4) %in% x
ENV_Plot_data_for_level
which(ENV_Plot_data$PlotNumber %in% plot_numbers_in_level)
ENV_Plot_data_for_level <- ENV_Plot_data %>% filter(ENV_Plot_data$PlotNumber %in% plot_numbers_in_level)
ENV_Plot_data_for_level
ENV_Plot_data$PlotNumber %in% plot_numbers_in_level
table(ENV_Plot_data$PlotNumber %in% plot_numbers_in_level)
ENV_Plot_data$PlotNumber
plot_numbers_in_level
plot_numbers_in_level[1]
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))[1]
plot_numbers_in_level
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))[[1]]
plot_numbers_in_level
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
ENV_Plot_data_for_level
plot_numbers_in_level
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
View(ENV_Plot_data_for_level)
# This prints env variable names to a list. A JASON doc is then created manually
#reports_dir <- file.path("reports", level_name)
#if (!dir.exists(reports_dir)) dir.create(reports_dir, recursive = TRUE)
library(rjson)
create_json_template <- function(plot_data_names, file_name) {
if (!dir.exists("lookup_functions")) {
dir.create("lookup_functions")
}
if(file.exists(file.path("lookup_functions", file_name))) return()
names_list <- list()
for (name in plot_data_names) {
names_list[[ name ]] <- list()
}
write(toJSON(names_list), file.path("lookup_functions", file_name))
}
create_json_template(names(ENV_Plot_data), "env_lookup_functions.json")
create_json_template(names(Humus_Plot_data), "humus_lookup_functions.json")
create_json_template(names(Mineral_Plot_data), "mineral_lookup_functions.json")
create_json_template(names(Climate_Plot_data), "climate_lookup_functions.json")
create_json_template(names(Admin_Plot_data), "admin_lookup_functions.json")
# Note: The functions need to be manually filled out in the json file
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, list(plot_data[[variable_name]])))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
test <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
print(ENV_Plot_data_for_level)
ENV_Plot_data_for_level
View(ENV_Plot_data_for_level)
test
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, list(plot_data[[variable_name]])))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
env_summary <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
humas_summary <- roll_up_plot_data(Humus_Plot_data_for_level, humus_lookup_functions)
mineral_summary <- roll_up_plot_data(Mineral_Plot_data_for_level, mineral_lookup_functions)
climate_summary <- roll_up_plot_data(Climate_Plot_data_for_level, climate_lookup_functions)
admin_summary <- roll_up_plot_data(Admin_Plot_data_for_level, admin_lookup_functions)
source("./_functions/_TabletoTree.R")
source("./_functions/_TreetoTable.R")
source("./_functions/_VegdatSUsummary.R")
source("./_functions/_spp_importance.R")
source("./_functions/_CreateHierReportData.R")
# Need to do for each level for each level_value in level
level_name <- "Order"
level_value <- "ORDER Poputre"
unique_classes <- unique(Hier.data[["Class"]])
unique_orders <- unique(Hier.data[["Order"]])
unique_suborder <- unique(Hier.data[["Suborder"]])
unique_alliance <- unique(Hier.data[["Alliance"]])
unique_assoc <- unique(Hier.data[["Assoc"]])
createHierReportData(level_name, level_value, SUTab)
#lapply(uniqueClasses, createReportData(levelName))
ENV_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_ENV.csv")
Humus_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Humus.csv")
Mineral_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Mineral.csv")
Climate_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster_Plot_Climatedata.csv")
Admin_Plot_data <- fread("./BEC_ReportR/Plot_Data/BECMaster19_Admin.csv")
# Get plot_numbers_in_level
plot_numbers_file_name <- paste("plot_numbers_in_", str_replace_all(level_value, " ", "_"), ".RDS", sep="")
plot_numbers_in_level <- readRDS(file.path("plotNumbers", level_name, plot_numbers_file_name))[[1]]
# Get relevant plot data rows from each Plot data file
#ENV_Plot_data_for_level <- ENV_Plot_data %>% filter(ENV_Plot_data$PlotNumber %in% plot_numbers_in_level)
ENV_Plot_data_for_level <- ENV_Plot_data[ENV_Plot_data$PlotNumber %in% plot_numbers_in_level]
Humus_Plot_data_for_level <- Humus_Plot_data[Humus_Plot_data$PlotNumber %in% plot_numbers_in_level]
Mineral_Plot_data_for_level <- Mineral_Plot_data[Mineral_Plot_data$PlotNumber %in% plot_numbers_in_level]
Climate_Plot_data_for_level <-  Climate_Plot_data[Climate_Plot_data$PlotNumber %in% plot_numbers_in_level]
Admin_Plot_data_for_level <- Admin_Plot_data[Admin_Plot_data$PlotNumber %in% plot_numbers_in_level]
# Write relevant plot data rows from each Plot
# This prints env variable names to a list. A JASON doc is then created manually
#reports_dir <- file.path("reports", level_name)
#if (!dir.exists(reports_dir)) dir.create(reports_dir, recursive = TRUE)
library(rjson)
create_json_template <- function(plot_data_names, file_name) {
if (!dir.exists("lookup_functions")) {
dir.create("lookup_functions")
}
if(file.exists(file.path("lookup_functions", file_name))) return()
names_list <- list()
for (name in plot_data_names) {
names_list[[ name ]] <- list()
}
write(toJSON(names_list), file.path("lookup_functions", file_name))
}
create_json_template(names(ENV_Plot_data), "env_lookup_functions.json")
create_json_template(names(Humus_Plot_data), "humus_lookup_functions.json")
create_json_template(names(Mineral_Plot_data), "mineral_lookup_functions.json")
create_json_template(names(Climate_Plot_data), "climate_lookup_functions.json")
create_json_template(names(Admin_Plot_data), "admin_lookup_functions.json")
# Note: The functions need to be manually filled out in the json file
env_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
humus_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
mineral_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
climate_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
admin_lookup_functions <- fromJSON(file="lookup_functions/env_lookup_functions.json")
roll_up_plot_data <- function(plot_data, lookup_function_list) {
rolled_up_list <- list()
for (variable_name in names(lookup_function_list)) {
variable_summaries <- list()
for (function_name in lookup_function_list[[variable_name]]) {
variable_summaries[[function_name]] <- list(do.call(function_name, list(plot_data[[variable_name]])))
}
rolled_up_list[[variable_name]] <- variable_summaries
}
return(rolled_up_list)
}
env_summary <- roll_up_plot_data(ENV_Plot_data_for_level, env_lookup_functions)
humas_summary <- roll_up_plot_data(Humus_Plot_data_for_level, humus_lookup_functions)
mineral_summary <- roll_up_plot_data(Mineral_Plot_data_for_level, mineral_lookup_functions)
climate_summary <- roll_up_plot_data(Climate_Plot_data_for_level, climate_lookup_functions)
admin_summary <- roll_up_plot_data(Admin_Plot_data_for_level, admin_lookup_functions)
