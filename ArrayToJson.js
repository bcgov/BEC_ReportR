const fs = require('fs');

let arr = ["PlotNumber", "FieldNumber", "ProjectID", "FSRegionDistrict", "Date", "SiteSurveyor", "PlotRepresenting", "Location", "Ecosection", "NtsMapSheet", "Longitude", "Latitude", "UTMZone", "UTMEasting", "UTMNorthing", "LocationAccuracy", "AirPhotoNum", "XCoord", "YCoord", "Zone", "SubZone", "SiteSeries", "SiteModifier1", "SiteModifier2", "TransDistrib", "RealmClass", "MapUnit", "SnowCoverregime", "MoistureRegime", "NutrientRegime", "SuccessionalStatus", "StructuralStage", "StructuralStageMod", "StandAge", "Elevation", "SlopeGradient", "Aspect", "MesoSlopePosition", "SurfaceShape", "SurfaceTopographyType", "SurfaceTopographySize", "WaterSource", "Photo", "Exposure1", "Exposure2", "SiteDisturbance1", "SiteDisturbance2", "SiteDisturbance3", "SubstrateDecWood", "SubstrateBedRock", "SubstrateRocks", "SubstrateMineralSoil", "SubstrateOrganicMatter", "SubstrateWater", "SiteNotes", "SoilSurveyor", "BedrockGeology1", "BedrockGeology2", "BedrockGeology3", "CoarseFragLith1", "CoarseFragLith2", "CoarseFragLith3", "TerrainTextureSurf", "SurficialMaterialSurf", "SurfaceExpSurf", "GeoMorProSurf", "TerrainTextureSubSurf", "SurficialMaterialSubSurf", "SurfaceExpSubSurf", "GeoMorProSubSurf", "FloodingRegimeFreq", "MoistureRegimeSub", "FloodingRegimeDur", "SoilDrainage", "SeepageDepth", "RootRestrictingType", "RootRestrictingDepth", "RootZoneParticleSize", "RootingDepth", "SoilClassSubGroup", "SoilClassGroup", "HumusForm", "HumusFormPhase", "pHMethodCodeMineral", "pHMethodCodeOrganic", "SoilNotes", "VegSurveyor", "StrataCoverTree", "StrataCoverShrub", "StrataCoverHerb", "StrataCoverMoss", "VegNotes", "HydroGeoSystem", "HydroGeoSubSystem", "SpeciesListComplete", "Temporary", "Flag", "SV_PolygonNumber", "SV_FloodPlain", "SV_StandAgeEstMeas", "SV_StandHeight", "SV_StandHeightEstMeas", "SV_CanopyComposition", "SV_SoilDepth", "SV_RootZoneTexture", "SV_PercentCoarseFrags", "SV_GleyingMottlingCM", "SV_WaterTableCM", "SV_FullCruiseCard", "SV_AhorizonType", "SV_AhorizonDepth", "ActiveLayerDepth"]

let obj = Object.fromEntries(arr.map(key => [key, []]))
let json = JSON.stringify(obj)

fs.writeFileSync('env_lookup_functions.json', json);


